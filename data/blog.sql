/*
Navicat MySQL Data Transfer

Source Server         : 192.168.91.130
Source Server Version : 50560
Source Host           : 192.168.91.130:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50560
File Encoding         : 65001

Date: 2018-09-20 15:50:46
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `TITLE` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `CREATED` timestamp NULL DEFAULT NULL,
  `TOPIC_TIME` timestamp NULL DEFAULT NULL,
  `TOPIC_COUNT` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `TITLE` (`TITLE`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES ('1', 'Java', '2018-09-10 11:08:27', '2018-09-12 22:13:13', '6');
INSERT INTO `category` VALUES ('2', 'Go', '2018-09-10 11:08:42', '2018-09-11 14:27:40', '1');
INSERT INTO `category` VALUES ('3', 'Python', '2018-09-10 11:08:49', '2018-09-10 11:08:49', '0');
INSERT INTO `category` VALUES ('4', 'Linux', '2018-09-10 11:08:52', '2018-09-10 11:08:52', '0');
INSERT INTO `category` VALUES ('6', '数据库', '2018-09-10 11:09:04', '2018-09-10 11:09:04', '0');
INSERT INTO `category` VALUES ('7', '操作系统', '2018-09-10 11:09:13', '2018-09-10 11:09:13', '0');
INSERT INTO `category` VALUES ('9', '机器学习', '2018-09-10 11:10:37', '2018-09-10 19:30:33', '2');
INSERT INTO `category` VALUES ('10', '算法', '2018-09-10 11:35:44', '2018-09-10 19:37:14', '1');
INSERT INTO `category` VALUES ('11', '数据结构', '2018-09-10 11:35:49', '2018-09-10 11:35:49', '0');
INSERT INTO `category` VALUES ('12', 'C', '2018-09-10 18:07:42', '2018-09-10 18:07:42', '0');
INSERT INTO `category` VALUES ('13', 'C++', '2018-09-10 18:07:45', '2018-09-10 18:07:45', '0');
INSERT INTO `category` VALUES ('14', 'Google', '2018-09-10 18:08:10', '2018-09-10 18:08:10', '0');
INSERT INTO `category` VALUES ('16', 'SpringBoot', '2018-09-11 13:51:49', '2018-09-11 13:51:49', '0');
INSERT INTO `category` VALUES ('17', 'SpringCloud', '2018-09-18 18:01:04', '2018-09-18 18:01:04', '0');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `TOPICID` bigint(20) DEFAULT NULL,
  `CONTENT` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `EMAIL` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `NAME` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `PARENT_ID` bigint(20) DEFAULT NULL,
  `CREATED` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1', '3', '可以，很有收获', 'John@qq.com', 'Jhon', '0', '2018-09-10 15:59:12');
INSERT INTO `comment` VALUES ('2', '3', '嘿，不错不错', 'Tom@qq.com', 'Tom', '0', '2018-09-10 16:18:31');
INSERT INTO `comment` VALUES ('3', '3', 'Tom', 'asdfasf@qq.com', 'Title Title Title 2', '0', '2018-09-10 18:09:21');
INSERT INTO `comment` VALUES ('4', '7', '不错不错', 'asdfasf@qq.com', 'Java', '0', '2018-09-11 14:25:29');
INSERT INTO `comment` VALUES ('5', '5', 'Tom 说了不错', 'Tom@qq.com', 'Tom', '0', '2018-09-12 14:14:13');
INSERT INTO `comment` VALUES ('6', '5', '嘿，不错不错', 'asdfasf@qq.com', 'Java', '0', '2018-09-12 14:15:30');
INSERT INTO `comment` VALUES ('7', '3', '可以可以', '', 'Java', '0', '2018-09-19 14:07:40');
INSERT INTO `comment` VALUES ('8', '3', '可以，很有收获', '', 'Python', '0', '2018-09-19 14:08:13');

-- ----------------------------
-- Table structure for event_entity
-- ----------------------------
DROP TABLE IF EXISTS `event_entity`;
CREATE TABLE `event_entity` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `ENTITY_TYPE` tinyint(4) DEFAULT NULL,
  `ENTITY_ID` bigint(20) DEFAULT NULL,
  `ACTOR_ID` bigint(20) DEFAULT NULL,
  `RECEIVER_ID` bigint(20) DEFAULT NULL,
  `CONTENT` varchar(255) DEFAULT NULL,
  `CREATED` timestamp NULL DEFAULT NULL,
  `PARENT_ID` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of event_entity
-- ----------------------------

-- ----------------------------
-- Table structure for topic
-- ----------------------------
DROP TABLE IF EXISTS `topic`;
CREATE TABLE `topic` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `USER_ID` bigint(20) DEFAULT NULL,
  `TITLE` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `CONTENT` text CHARACTER SET utf8,
  `ATTACHMENT` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `CREATED` timestamp NULL DEFAULT NULL,
  `UPDATED` timestamp NULL DEFAULT NULL,
  `VIEWS` bigint(20) DEFAULT NULL,
  `AUTHOR` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `REPLAY_TIME` timestamp NULL DEFAULT NULL,
  `REPLAY_COUNT` bigint(20) DEFAULT NULL,
  `REPLAY_LAST_USER_ID` bigint(20) DEFAULT NULL,
  `CATEGORY_ID` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `idx_topic_CATEGORY_ID` (`CATEGORY_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of topic
-- ----------------------------
INSERT INTO `topic` VALUES ('3', '1', '机器学习根据文字生成图片教程（附python代码）', '<h2 id=\"背景\">背景</h2><p>其实在过往我们生活的世界里，当人们需要获取信息的时候，更多地强调的是信息的检索和遍历，意味着去已经存在的物品中找到自己合适的。在我看来这是一种很低级的生活形态，比如我的意识中有一个某种图案的杯子，想要它，只能打开淘宝根据标签去找已经设计好的款式有没有相近的，而不能直接根据我的想法自动生成一个我需要的杯子。</p><p>又比如，我想要一张猫正在喝水的照片，只能去搜索引擎里去根据关键词搜索已经存在的猫喝水的照片，而不是自动生成一张符合我要求的照片。随着人工智能的升级，这种低级的信息获取方式一定会淘汰。</p><p>今天就介绍一种深度学习方法，如何根据文字自动生成图片。先来看下效果：</p><p>输入文本:&nbsp;<br><code><br>sky is above the grass, man standing on the grass&nbsp;<br></code><br>生成的图片，是不是有点神奇：&nbsp;<br><img src=\"https://img-blog.csdn.net/20180905172552307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dzaGVuZ29k/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><h2 id=\"详细流程\"><a name=\"t1\"></a>详细流程</h2><p>关于具体的算法细节可以看下这个论文：“Image Generation from Scene Graphs”</p><h3 id=\"1下载代码\"><a name=\"t2\"></a>1.下载代码</h3><p>代码可以在Github找到：&nbsp;<a href=\"https://github.com/google/sg2im?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\" rel=\"nofollow\" target=\"_blank\">https://github.com/google/sg2im?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more</a>&nbsp;<br>需要把sgim文件夹复制到scripts文件夹下面：&nbsp;<br><img src=\"https://img-blog.csdn.net/20180905173007509?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dzaGVuZ29k/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><h3 id=\"2安装需要的第三方库\"><a name=\"t3\"></a>2.安装需要的第三方库</h3><p>建议用python3以上版本，在文件夹下执行&nbsp;<br><code><br>sudo pip3 install -r requirements.txt&nbsp;<br></code></p><h3 id=\"3下载模型\"><a name=\"t4\"></a>3.下载模型</h3><p>首先自行安装好wget，然后在代码目录下执行：&nbsp;<br><code><br>bash scripts/download_models.sh&nbsp;<br></code></p><h3 id=\"4创建图片\"><a name=\"t5\"></a>4.创建图片</h3><p>首先，要先自己搞个描述脚本，这个脚本需要描述生成图片中的对象以及对象间的位置关系。比如以下脚本(看过《机器学习实践应用》的同学是不是会眼熟，有点像里面知识图谱的内容)：&nbsp;<br><code><br>[&nbsp;<br>{&nbsp;<br>objects: [car, street, line, sky],&nbsp;<br>relationships: [&nbsp;<br>[0, on, 1],&nbsp;<br>[2, on, 1],&nbsp;<br>[3, above, 1]&nbsp;<br>]&nbsp;<br>}&nbsp;<br>]&nbsp;<br></code><br>描述的是car在street的上面，line在street的上面，sky也在street上面。然后在代码的根目录下执行以下代码(代码中的括号内容是注释，执行前需要去掉)：&nbsp;<br><code><br>python3 scripts/run_model.py（预测脚本） --checkpoint sg2im-models/vg128.pt（下载好的模型所在地址） --scene_graphs aohai.json（上面写的脚本） --output_dir outputs（图片输出路径）&nbsp;<br></code></p><p>最终生成的图片效果：</p><p><img src=\"https://img-blog.csdn.net/20180905173427343?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dzaGVuZ29k/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><h2 id=\"总结\"><a name=\"t6\"></a>总结</h2><p>是不是很好玩，可以自己任意添加描述脚本，生成自己想要的图片，是不是非常酷。目前来看像素还比较低，希望以后该项目可以继续更新，可以生成更多高清大图。</p><p><br></p>', 'python', '2018-09-10 11:19:12', '2018-09-10 11:19:12', '1', 'Tom', '2018-09-10 11:19:12', '6', '0', '9');
INSERT INTO `topic` VALUES ('4', '1', '10种机器学习算法（附Python代码）', '<p><span style=\"color: inherit; font-family: inherit; font-size: 36px;\">sklearn python API</span><br></p><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\" rel=\"nofollow\" target=\"_blank\">LinearRegression</a></li></ul><pre name=\"code\"><code>from sklearn.linear_model import LinearRegression         # 线性回归 #\r\nmodule = LinearRegression()\r\nmodule.fit(x, y)\r\nmodule.score(x, y)\r\nmodule.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\" rel=\"nofollow\" target=\"_blank\">LogisticRegression</a></li></ul><pre name=\"code\"><code>from sklearn.linear_model import LogisticRegression         # 逻辑回归 #\r\nmodule = LogisticRegression()\r\nmodule.fit(x, y)\r\nmodule.score(x, y)\r\nmodule.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\" rel=\"nofollow\" target=\"_blank\">KNN</a></li></ul><pre name=\"code\"><code>from sklearn.neighbors import KNeighborsClassifier     #K近邻#\r\nfrom sklearn.neighbors import KNeighborsRegressor\r\nmodule = KNeighborsClassifier(n_neighbors=6)\r\nmodule.fit(x, y)\r\npredicted = module.predict(test)\r\npredicted = module.predict_proba(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html\" rel=\"nofollow\" target=\"_blank\">SVM</a></li></ul><pre name=\"code\"><code>from sklearn import svm                                #支持向量机#\r\nmodule = svm.SVC()\r\nmodule.fit(x, y)\r\nmodule.score(x, y)\r\nmodule.predict(test)\r\nmodule.predict_proba(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html\" rel=\"nofollow\" target=\"_blank\">naive_bayes</a></li></ul><pre name=\"code\"><code>from sklearn.naive_bayes import GaussianNB            #朴素贝叶斯分类器#\r\nmodule = GaussianNB()\r\nmodule.fit(x, y)\r\npredicted = module.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html\" rel=\"nofollow\" target=\"_blank\">DecisionTree</a></li></ul><pre name=\"code\"><code>from sklearn import tree                              #决策树分类器#\r\nmodule = tree.DecisionTreeClassifier(criterion=\'gini\')\r\nmodule.fit(x, y)\r\nmodule.score(x, y)\r\nmodule.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html\" rel=\"nofollow\" target=\"_blank\">K-Means</a></li></ul><pre name=\"code\"><code>from sklearn.cluster import KMeans                    #kmeans聚类#\r\nmodule = KMeans(n_clusters=3, random_state=0)\r\nmodule.fit(x, y)\r\nmodule.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\" rel=\"nofollow\" target=\"_blank\">RandomForest</a></li></ul><pre name=\"code\"><code>from sklearn.ensemble import RandomForestClassifier  #随机森林#\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nmodule = RandomForestClassifier()\r\nmodule.fit(x, y)\r\nmodule.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\" rel=\"nofollow\" target=\"_blank\">GBDT</a></li></ul><pre name=\"code\"><code>from sklearn.ensemble import GradientBoostingClassifier      #Gradient Boosting 和 AdaBoost算法#\r\nfrom sklearn.ensemble import GradientBoostingRegressor\r\nmodule = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=1, random_state=0)\r\nmodule.fit(x, y)\r\nmodule.predict(test)</code></pre><hr><ul><li><a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html\" rel=\"nofollow\" target=\"_blank\">PCA</a></li></ul><pre name=\"code\"><code>from sklearn.decomposition import PCA              #PCA特征降维#\r\ntrain_reduced = PCA.fit_transform(train)\r\ntest_reduced = PCA.transform(test)</code></pre><hr><h3 id=\"references\"><a name=\"t1\"></a><a href=\"https://mp.weixin.qq.com/s/vwNaLDkmXiNRmj-D3Ae6eQ\" rel=\"nofollow\" target=\"_blank\">References</a></h3><h6 id=\"注若有不妥之处敬请指正\"><strong>注:若有不妥之处敬请指正</strong></h6>', 'python', '2018-09-10 11:30:33', '2018-09-10 11:30:33', '1', 'Tom', '2018-09-10 11:30:33', '1', '0', '9');
INSERT INTO `topic` VALUES ('5', '1', '关于红黑树原理及算法详解', '<p><strong>目录：</strong>&nbsp;<br>1 红黑树的概念&nbsp;<br>2 红黑树的性质&nbsp;<br>3 红黑树的基本操作(一) 左旋和右旋&nbsp;<br>4 红黑树的基本操作(二) 添加&nbsp;<br>5 红黑树的基本操作(三) 删除&nbsp;<br>6 红黑树的应用&nbsp;<br>7 红黑树与AVL树的比较&nbsp;<br><strong>红黑树：</strong>&nbsp;R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。</p><ul><li>特性：</li></ul><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色或红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求:</p><p>性质1. 节点是红色或黑色。</p><p>性质2. 根节点是黑色。</p><p>性质3 每个叶节点是黑色的。</p><p>性质4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</p><p>性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。&nbsp;<br>注意：&nbsp;<br>(01) 特性(3)中的叶子节点，是只为空(NIL或null)的节点。&nbsp;<br>(02) 特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。&nbsp;<br>红黑树示意图如下：&nbsp;<br><img src=\"https://img-blog.csdn.net/20180409164846812?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTM5NDcw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><ul><li>红黑树的基本操作(一) 左旋和右旋</li></ul><p>红黑树的基本操作是添加、删除。在对红黑树进行添加或删除之后，都会用到旋转方法。为什么呢？在红黑树的示例图中我们可以看到添加或删除红黑树中的节点之后，红黑树就发生了变化，可能不满足红黑树的5条性质，也就不再是一颗红黑树了，而是一颗普通的树。而通过旋转，可以使这颗树重新成为红黑树。在这里，我们旋转的目的是为了让树保持红黑树的特性。&nbsp;<br>旋转包括两种：左旋 和 右旋。下面分别对它们进行介绍。&nbsp;</p>', '数据结构', '2018-09-10 11:32:14', '2018-09-10 11:32:14', '1', 'Tom', '2018-09-10 11:32:14', '4', '0', '1');
INSERT INTO `topic` VALUES ('6', '1', '背包LeetCode刷题指南（一）', '<p>以下是我个人做题过程中的一些体会：&nbsp;<br>1. LeetCode的题库越来越大，截止到目前，已经有321个问题了。对于大多数人来说，没有时间也没有必要把所有题目都做一遍（时间充裕可以随意）。刷个100题左右应该就差不多了（可以考虑序号为前100多的题目，相对更经典一点）。&nbsp;<br>2. 从AC率高的开始做，难度从简单-&gt;中等，先不要做困难的。&nbsp;<br>3. 可以按照下文的面试出题频率顺序来做，从频率最高的一批开始。&nbsp;<br>4. 尽量不使用IDE，直接在平台上写代码。&nbsp;<br>5. 不要看标签，不要看标签，不要看标签。标签相当于问题的分类，看了标签就会往那个方向去想，不利于自主思考。&nbsp;<br>6. 写好代码先不要提交，人工检查一下代码，比如分号是否都有写，return有没少等等。&nbsp;<br>7. 人工检查完后使用“Custom Testcase”功能自定义测试用例，注意检查边界，然后“Run Code”，这步可以发现蛮多问题的。&nbsp;<br>8. 等RunCode通过后，再去提交。</p><p>刷题顺序：&nbsp;<br>出现频度为5：&nbsp;<br>1.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50889558\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 1. Two Sum [Difficulty: Easy]</a>&nbsp;<br>2.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50953068\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 8. String to Integer (atoi) [Difficulty: Easy]</a>&nbsp;<br>3.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/51314133\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 15. 3Sum [Difficulty: Medium]</a>&nbsp;<br>4.&nbsp;<a href=\"http://blog.csdn.net/Lnho2015/article/details/50970920\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 20. Valid Parentheses [Difficulty: Easy]</a>&nbsp;<br>5.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50801842\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 21. Merge Two Sorted Lists [Difficulty: Easy]</a>&nbsp;<br>6.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/51275683\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 28. Implement strStr() [Difficulty: Easy]</a>&nbsp;<br>7. Leet Code OJ 56. Merge Intervals [Difficulty: Hard]&nbsp;<br>8. Leet Code OJ 57. Insert Interval [Difficulty: Hard]&nbsp;<br>9. Leet Code OJ 65. Valid Number [Difficulty: Hard]&nbsp;<br>10.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50756205\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 70. Climbing Stairs [Difficulty: Easy]</a>&nbsp;<br>11. Leet Code OJ 73. Set Matrix Zeroes [Difficulty: Medium]&nbsp;<br>12.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50912902\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 88. Merge Sorted Array [Difficulty: Easy]</a>&nbsp;<br>13. Leet Code OJ 98. Validate Binary Search Tree [Difficulty: Medium]&nbsp;<br>14.&nbsp;<a href=\"http://blog.csdn.net/Lnho2015/article/details/50978799\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 125. Valid Palindrome [Difficulty: Easy]</a>&nbsp;<br>15. Leet Code OJ 127. Word Ladder [Difficulty: Medium]</p><p>出现频度为4：&nbsp;<br>1.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50962615\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 2. Add Two Numbers [Difficulty: Medium]</a>&nbsp;<br>2. Leet Code OJ 12. Integer to Roman&nbsp;<br>3. Leet Code OJ 13. Roman to Integer&nbsp;<br>4. Leet Code OJ 22. Generate Parentheses&nbsp;<br>5. Leet Code OJ 23. Merge k Sorted Lists&nbsp;<br>6. Leet Code OJ 24. Swap Nodes in Pairs&nbsp;<br>7.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50802024\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 27. Remove Element [Difficulty: Easy]</a>&nbsp;<br>8. Leet Code OJ 46. Permutations&nbsp;<br>9. Leet Code OJ 49. Anagrams&nbsp;<br>10. Leet Code OJ 67. Add Binary&nbsp;<br>11. Leet Code OJ 69. Sqrt(x)&nbsp;<br>12. Leet Code OJ 77. Combinations&nbsp;<br>13. Leet Code OJ 78. Subsets&nbsp;<br>14. Leet Code OJ 79. Word Search&nbsp;<br>15.&nbsp;<a href=\"http://blog.csdn.net/Lnho2015/article/details/51752243\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 91. Decode Ways [Difficulty: Medium]</a>&nbsp;<br>16.&nbsp;<a href=\"http://blog.csdn.net/lnho2015/article/details/50826565\" rel=\"nofollow\" target=\"_blank\">Leet Code OJ 102. Binary Tree Level Order Traversal [Difficulty: Easy]</a>&nbsp;<br>17. Leet Code OJ 129. Sum Root to Leaf Numbers&nbsp;<br>18. Leet Code OJ 131. Palindrome Partitioning</p>', '算法', '2018-09-10 11:34:46', '2018-09-10 11:34:46', '1', 'Tom', '2018-09-10 11:34:46', '3', '0', '1');
INSERT INTO `topic` VALUES ('7', '1', '背包问题的两种解决方法', '<p>背包问题是比较常见的算法问题，下面分别给出了动态规划与列举法实现方式，代码如下：</p><p>动态规划：</p><pre onclick=\"hljs.copyCode(event)\"><code><ol><li><div><div></div></div><div><div>#define _CRT_SECURE_NO_WARNINGS</div></div></li><li><div><div></div></div><div><div>#include&lt;iostream&gt;  </div></div></li><li><div><div></div></div><div><div>using namespace std;</div></div></li><li><div><div></div></div><div><div>#define  V 1500  </div></div></li><li><div><div></div></div><div><div>unsigned int f[10][V];//全局变量，自动初始化为0  </div></div></li><li><div><div></div></div><div><div>unsigned int weight[10];</div></div></li><li><div><div></div></div><div><div>unsigned int value[10];</div></div></li><li><div><div></div></div><div><div>#define  max(x,y)   (x)&gt;(y)?(x):(y)  </div></div></li><li><div><div></div></div><div><div>int main()</div></div></li><li><div><div></div></div><div><div>{</div></div></li><li><div><div></div></div><div><div>	freopen(\"input.txt\", \"r\", stdin);</div></div></li><li><div><div></div></div><div><div>	int N, M;</div></div></li><li><div><div></div></div><div><div>	cin &gt;&gt; N;//物品个数  </div></div></li><li><div><div></div></div><div><div>	cin &gt;&gt; M;//背包容量  </div></div></li><li><div><div></div></div><div><div>	for (int i = 1; i &lt;= N; i++)</div></div></li><li><div><div></div></div><div><div>	{</div></div></li><li><div><div></div></div><div><div>		cin &gt;&gt; weight[i] &gt;&gt; value[i];</div></div></li><li><div><div></div></div><div><div>	}</div></div></li><li><div><div></div></div><div><div>	for (int i = 1; i &lt;= N; i++)</div></div></li><li><div><div></div></div><div><div>	{</div></div></li><li><div><div></div></div><div><div>		for (int j = 1; j &lt;= M; j++)</div></div></li><li><div><div></div></div><div><div>		{</div></div></li><li><div><div></div></div><div><div>			if (weight[i] &lt;= j)//可以放下的情况，多的kg数能放的净重,可以将其他的溢出</div></div></li><li><div><div></div></div><div><div>			{</div></div></li><li><div><div></div></div><div><div>				f[i][j] = max(f[i - 1][j], f[i - 1][j - weight[i]] + value[i]);</div></div></li><li><div><div></div></div><div><div>			}</div></div></li><li><div><div></div></div><div><div>			else</div></div></li><li><div><div></div></div><div><div>				f[i][j] = f[i - 1][j];//不可以放下的情况</div></div></li><li><div><div></div></div><div><div>		}</div></div></li><li><div><div></div></div><div><div>	}</div></div></li><li><div><div></div></div><div><div>	cout &lt;&lt; f[N][M] &lt;&lt; endl;//输出最优解  </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>}</div></div></li></ol></code></pre><p>其中输入input.txt内容如下：</p><p>5<br>10<br>2 3<br>2 6<br>6 5<br>5 4<br>4 6<br></p><p>列举法：</p><pre onclick=\"hljs.copyCode(event)\"><code><ol><li><div><div></div></div><div><div>#include&lt;iostream&gt;</div></div></li><li><div><div></div></div><div><div>using namespace std;</div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>#define SUM 10</div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>int main()</div></div></li><li><div><div></div></div><div><div>{</div></div></li><li><div><div></div></div><div><div>	int count = 0;</div></div></li><li><div><div></div></div><div><div>	int res = 0;</div></div></li><li><div><div></div></div><div><div>	int a[5] = { 0 };</div></div></li><li><div><div></div></div><div><div>	for (int i = 0; i &lt;= SUM; i++)</div></div></li><li><div><div></div></div><div><div>	{</div></div></li><li><div><div></div></div><div><div>		a[0] = i;</div></div></li><li><div><div></div></div><div><div>		for (int j = 0; j &lt;= SUM - i; j++)</div></div></li><li><div><div></div></div><div><div>		{</div></div></li><li><div><div></div></div><div><div>			a[1] = j;</div></div></li><li><div><div></div></div><div><div>			for (int m = 0; m &lt;=SUM - i - j; m++)</div></div></li><li><div><div></div></div><div><div>			{</div></div></li><li><div><div></div></div><div><div>				a[2] = m;</div></div></li><li><div><div></div></div><div><div>				for (int n = 0; n &lt;= SUM - i - j - m; n++)</div></div></li><li><div><div></div></div><div><div>				{</div></div></li><li><div><div></div></div><div><div>					a[3] = n;</div></div></li><li><div><div></div></div><div><div>					a[4] = SUM - i - j - m - n;</div></div></li><li><div><div></div></div><div><div>					int sum = 0;</div></div></li><li><div><div></div></div><div><div>					if (a[0] &gt;= 2)</div></div></li><li><div><div></div></div><div><div>						sum = sum + 6;</div></div></li><li><div><div></div></div><div><div>					if (a[1]&gt;=2)</div></div></li><li><div><div></div></div><div><div>						sum = sum + 3;</div></div></li><li><div><div></div></div><div><div>					if (a[2]&gt;=6)</div></div></li><li><div><div></div></div><div><div>						sum = sum + 5;</div></div></li><li><div><div></div></div><div><div>					if (a[3]&gt;=5)</div></div></li><li><div><div></div></div><div><div>						sum = sum + 4;</div></div></li><li><div><div></div></div><div><div>					if (a[4]&gt;=4)</div></div></li><li><div><div></div></div><div><div>						sum = sum + 6;</div></div></li><li><div><div></div></div><div><div>					if (sum &gt; res)</div></div></li><li><div><div></div></div><div><div>						res = sum;</div></div></li><li><div><div></div></div><div><div>					count++;</div></div></li><li><div><div></div></div><div><div>				}</div></div></li><li><div><div></div></div><div><div>			}</div></div></li><li><div><div></div></div><div><div>		}</div></div></li><li><div><div></div></div><div><div>	}</div></div></li><li><div><div></div></div><div><div>	cout &lt;&lt; \"total count=\"&lt;&lt;count&lt;&lt;\",Max value=\"&lt;&lt;res&lt;&lt;endl;</div></div></li><li><div><div></div></div><div><div>	return 0;</div></div></li><li><div><div></div></div><div><div>}</div></div></li></ol></code><br>\r\n\r\n</pre>', 'C++', '2018-09-10 11:37:13', '2018-09-10 11:37:13', '1', 'Tom', '2018-09-10 11:37:13', '5', '0', '10');
INSERT INTO `topic` VALUES ('8', '0', 'beego 注解路由', '<p>场景描述：使用注解路由，不起作用。</p><p>额外描述：</p><p>路由的添加都写在 main函数中了，同时未设置</p><p></p><pre onclick=\"hljs.copyCode(event)\"><code>beego.BConfig.RunMode =\"dev\"</code></pre><p>也未引入 ：</p><pre onclick=\"hljs.copyCode(event)\"><code>routers包的初始化操作</code></pre><p><br></p><p>其官网描述：</p><p><a href=\"http://beego.me/docs/mvc/controller/router.md\" rel=\"nofollow\" target=\"_blank\">http://beego.me/docs/mvc/controller/router.md</a></p><p><br></p><p><strong>应用中的大多数路由都会定义在 routers/router.go 文件中</strong><br><br><br>从beego1.3版本开始支持了注解路由，用户无需在router中注册路由，只需要Include相应地controller，</p><p>然后在controller的method方法上面写上router注释（// @router）就可以了，详细的使用请看下面的例子：<br><br><br></p><pre onclick=\"hljs.copyCode(event)\"><code><ol><li><div><div></div></div><div><div>// CMS API</div></div></li><li><div><div></div></div><div><div>type CMSController struct {</div></div></li><li><div><div></div></div><div><div>    beego.Controller</div></div></li><li><div><div></div></div><div><div>}</div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>func (c *CMSController) URLMapping() {</div></div></li><li><div><div></div></div><div><div>    c.Mapping(\"StaticBlock\", c.StaticBlock)</div></div></li><li><div><div></div></div><div><div>    c.Mapping(\"AllBlock\", c.AllBlock)</div></div></li><li><div><div></div></div><div><div>}</div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>// @router /staticblock/:key [get]</div></div></li><li><div><div></div></div><div><div>func (this *CMSController) StaticBlock() {</div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>}</div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div> </div></div></li><li><div><div></div></div><div><div>// @router /all/:key [get]</div></div></li><li><div><div></div></div><div><div>func (this *CMSController) AllBlock() {</div></div></li><li><div><div></div></div><div><div>this.Ctx.WriteString(\"CMSController/all\")</div></div></li><li><div><div></div></div><div><div>}</div></div></li></ol></code></pre><p><br><br><br><br><br><br><strong>可以在router.go中通过如下方式注册路由：<br><br>beego.Include(&amp;CMSController{})</strong></p><p><strong><br>beego自动会进行源码分析，注意只会在dev模式下进行生成，生成的路由放在“/routers/commentsRouter.go”文件中。</strong><br><br><br>这样上面的路由就支持了如下的路由：<br><br><br>GET /staticblock/:key<br>GET /all/:key<br>其实效果和自己通过Router函数注册是一样的：<br><br><br>beego.Router(\"/staticblock/:key\", &amp;CMSController{}, \"get:StaticBlock\")<br>beego.Router(\"/all/:key\", &amp;CMSController{}, \"get:AllBlock\")<br>同时大家注意到新版本里面增加了URLMapping这个函数，这是新增加的函数，</p><p>用户如果没有进行注册，那么就会通过反射来执行对应的函数，如果注册了就会通过interface来进行执行函数，性能上面会提升很多。<br></p><p><br></p>', '标签', '2018-09-11 14:27:40', '2018-09-11 14:27:40', '0', '作者', '2018-09-11 14:27:40', '0', '0', '2');
INSERT INTO `topic` VALUES ('10', '0', 'Dobbo的背景介绍', '<h1 id=\"背景\">背景</h1><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src=\"https://dubbo.gitbooks.io/dubbo-user-book/content/sources/images/dubbo-architecture-roadmap.jpg\" alt=\"image\"></p><h4 id=\"单一应用架构\">单一应用架构</h4><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h4 id=\"垂直应用架构\">垂直应用架构</h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h4 id=\"分布式服务架构\">分布式服务架构</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h4 id=\"流动计算架构\">流动计算架构</h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>', 'Dobbo,分布式', '2018-09-20 10:12:37', '2018-09-20 10:12:37', '0', 'Alibaba', '2018-09-20 10:12:37', '0', '0', '1');
INSERT INTO `topic` VALUES ('11', '0', 'Dobbo的架构', '<p><br></p><p><img src=\"https://dubbo.gitbooks.io/dubbo-user-book/content/sources/images/dubbo-architecture.jpg\" alt=\"dubbo-architucture\"></p><h5 id=\"节点角色说明\">节点角色说明</h5><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td><code>Provider</code></td><td>暴露服务的服务提供方</td></tr><tr><td><code>Consumer</code></td><td>调用远程服务的服务消费方</td></tr><tr><td><code>Registry</code></td><td>服务注册与发现的注册中心</td></tr><tr><td><code>Monitor</code></td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td><code>Container</code></td><td>服务运行容器</td></tr></tbody></table><h5 id=\"调用关系说明\">调用关系说明</h5><ol><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p><h2 id=\"连通性\">连通性</h2><ul><li>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</li><li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</li><li>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</li><li>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</li><li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</li><li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</li><li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</li><li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</li></ul><h2 id=\"健状性\">健状性</h2><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><h2 id=\"伸缩性\">伸缩性</h2><ul><li>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心</li><li>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</li></ul><h2 id=\"升级性\">升级性</h2><p>当服务集群规模进一步扩大，带动IT治理结构进一步升级，需要实现动态部署，进行流动计算，现有分布式服务架构不会带来阻力。下图是未来可能的一种架构：</p><p><img src=\"https://dubbo.gitbooks.io/dubbo-user-book/content/sources/images/dubbo-architecture-future.jpg\" alt=\"dubbo-architucture-futures\"></p><h5 id=\"节点角色说明\">节点角色说明</h5><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td><code>Deployer</code></td><td>自动部署服务的本地代理</td></tr><tr><td><code>Repository</code></td><td>仓库用于存储服务应用发布包</td></tr><tr><td><code>Scheduler</code></td><td>调度中心基于访问压力自动增减服务提供者</td></tr><tr><td><code>Admin</code></td><td>统一管理控制台</td></tr><tr><td><code>Registry</code></td><td>服务注册与发现的注册中心</td></tr><tr><td><code>Monitor</code></td><td>统计服务的调用次数和调用时间的监控中心</td></tr></tbody></table>', 'Dobbo,分布式', '2018-09-20 10:18:59', '2018-09-20 10:18:59', '0', 'Alibaba', '2018-09-20 10:18:59', '0', '0', '1');
INSERT INTO `topic` VALUES ('12', '0', 'Dobbo的简单使用', '<p><span style=\"color: inherit; font-family: inherit; font-size: 30px;\">本地服务 Spring 配置</span><br></p><p>local.xml:</p><pre><code>&lt;bean id=“xxxService” class=“com.xxx.XxxServiceImpl” /&gt;\r\n&lt;bean id=“xxxAction” class=“com.xxx.XxxAction”&gt;\r\n    &lt;property name=“xxxService” ref=“xxxService” /&gt;\r\n&lt;/bean&gt;\r\n</code></pre><h2 id=\"远程服务-spring-配置\">远程服务 Spring 配置</h2><p>在本地服务的基础上，只需做简单配置，即可完成远程化：</p><ul><li>将上面的&nbsp;<code>local.xml</code>&nbsp;配置拆分成两份，将服务定义部分放在服务提供方&nbsp;<code>remote-provider.xml</code>，将服务引用部分放在服务消费方&nbsp;<code>remote-consumer.xml</code>。</li><li>并在提供方增加暴露服务配置&nbsp;<code>&lt;dubbo:service&gt;</code>，在消费方增加引用服务配置&nbsp;<code>&lt;dubbo:reference&gt;</code>。</li></ul><p>remote-provider.xml:</p><pre><code><span spellcheck=\"true\">&lt;!-- 和本地服务一样实现远程服务 --&gt;</span>\r\n&lt;bean id=“xxxService” class=“com.xxx.XxxServiceImpl” /&gt; \r\n<span spellcheck=\"true\">&lt;!-- 增加暴露远程服务配置 --&gt;</span>\r\n&lt;dubbo:service interface=“com.xxx.XxxService” ref=“xxxService” /&gt;\r\n</code></pre><p>remote-consumer.xml:</p><pre><code><span spellcheck=\"true\">&lt;!-- 增加引用远程服务配置 --&gt;</span>\r\n&lt;dubbo:reference id=“xxxService” interface=“com.xxx.XxxService” /&gt;\r\n<span spellcheck=\"true\">&lt;!-- 和本地服务一样使用远程服务 --&gt;</span>\r\n&lt;bean id=“xxxAction” class=“com.xxx.XxxAction”&gt; \r\n    &lt;property name=“xxxService” ref=“xxxService” /&gt;\r\n&lt;/bean&gt;</code></pre>', 'Dobbo,分布式', '2018-09-20 10:20:34', '2018-09-20 10:20:34', '0', 'Alibaba', '2018-09-20 10:20:34', '0', '0', '1');
INSERT INTO `topic` VALUES ('15', '0', 'Dobbo快速启动', '<h1 id=\"快速启动\">快速启动</h1><p>Dubbo 采用全 Spring 配置方式，透明化接入应用，对应用没有任何 API 侵入，只需用 Spring 加载 Dubbo 的配置即可，Dubbo 基于 Spring 的 Schema 扩展进行加载。</p><p>如果不想使用 Spring 配置，可以通过&nbsp;<a href=\"https://dubbo.gitbooks.io/dubbo-user-book/configuration/api.md\">API 的方式</a>&nbsp;进行调用。</p><h2 id=\"服务提供者\">服务提供者</h2><p>完整安装步骤，请参见：<a href=\"https://dubbo.gitbooks.io/dubbo-admin-book/install/provider-demo.html\" target=\"_blank\">示例提供者安装</a></p><h3 id=\"定义服务接口\">定义服务接口</h3><p>DemoService.java&nbsp;<sup><a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html#fn_1\" id=\"reffn_1\">1</a></sup>：</p><pre><code>package com.alibaba.dubbo.demo;\r\n\r\npublic interface DemoService {\r\n    String sayHello(String name);\r\n}\r\n</code></pre><h3 id=\"在服务提供方实现接口\">在服务提供方实现接口</h3><p>DemoServiceImpl.java&nbsp;<sup><a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html#fn_2\" id=\"reffn_2\">2</a></sup>：</p><pre><code>\r\npackage com.alibaba.dubbo.demo.provider;\r\n\r\nimport com.alibaba.dubbo.demo.DemoService;\r\n\r\npublic class DemoServiceImpl implements DemoService {\r\n    public String sayHello(String name) {\r\n        return \"Hello \" + name;\r\n    }\r\n}\r\n</code></pre><h3 id=\"用-spring-配置声明暴露服务\">用 Spring 配置声明暴露服务</h3><p>provider.xml：</p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\r\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\r\n    &lt;dubbo:application name=\"hello-world-app\"  /&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span>\r\n    &lt;dubbo:registry address=\"multicast://224.5.6.7:1234\" /&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span>\r\n    &lt;dubbo:protocol name=\"dubbo\" port=\"20880\" /&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span>\r\n    &lt;dubbo:service interface=\"com.alibaba.dubbo.demo.DemoService\" ref=\"demoService\" /&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 和本地bean一样实现服务 --&gt;</span>\r\n    &lt;bean id=\"demoService\" class=\"com.alibaba.dubbo.demo.provider.DemoServiceImpl\" /&gt;\r\n&lt;/beans&gt;\r\n</code></pre><h3 id=\"加载-spring-配置\">加载 Spring 配置</h3><p>Provider.java：</p><pre><code>import org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\npublic class Provider {\r\n    public static void main(String[] args) throws Exception {\r\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"http://10.20.160.198/wiki/display/dubbo/provider.xml\"});\r\n        context.start();\r\n        System.in.read(); <span spellcheck=\"true\">// 按任意键退出</span>\r\n    }\r\n}\r\n</code></pre><h2 id=\"服务消费者\">服务消费者</h2><p>完整安装步骤，请参见：<a href=\"https://dubbo.gitbooks.io/dubbo-admin-book/install/consumer-demo.html\" target=\"_blank\">示例消费者安装</a></p><h3 id=\"通过-spring-配置引用远程服务\">通过 Spring 配置引用远程服务</h3><p>consumer.xml：</p><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\r\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span>\r\n    &lt;dubbo:application name=\"consumer-of-helloworld-app\"  /&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span>\r\n    &lt;dubbo:registry address=\"multicast://224.5.6.7:1234\" /&gt;\r\n\r\n    <span spellcheck=\"true\">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span>\r\n    &lt;dubbo:reference id=\"demoService\" interface=\"com.alibaba.dubbo.demo.DemoService\" /&gt;\r\n&lt;/beans&gt;\r\n</code></pre><h3 id=\"加载spring配置，并调用远程服务\">加载Spring配置，并调用远程服务</h3><p>Consumer.java&nbsp;<sup><a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html#fn_3\" id=\"reffn_3\">3</a></sup>：</p><pre><code>import org.springframework.context.support.ClassPathXmlApplicationContext;\r\nimport com.alibaba.dubbo.demo.DemoService;\r\n\r\npublic class Consumer {\r\n    public static void main(String[] args) throws Exception {\r\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"http://10.20.160.198/wiki/display/dubbo/consumer.xml\"});\r\n        context.start();\r\n        DemoService demoService = (DemoService)context.getBean(\"demoService\"); <span spellcheck=\"true\">// 获取远程服务代理</span>\r\n        String hello = demoService.sayHello(\"world\"); <span spellcheck=\"true\">// 执行远程方法</span>\r\n        System.out.println( hello ); <span spellcheck=\"true\">// 显示调用结果</span>\r\n    }\r\n}\r\n</code></pre><blockquote id=\"fn_1\"><sup>1</sup>. 该接口需单独打包，在服务提供方和消费方共享<a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html#reffn_1\" title=\"Jump back to footnote [1] in the text.\">&nbsp;↩</a></blockquote><blockquote id=\"fn_2\"><sup>2</sup>. 对服务消费方隐藏实现<a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html#reffn_2\" title=\"Jump back to footnote [2] in the text.\">&nbsp;↩</a></blockquote><blockquote id=\"fn_3\"><sup>3</sup>. 也可以使用 IoC 注入<a href=\"https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html#reffn_3\" title=\"Jump back to footnote [3] in the text.\">&nbsp;↩</a></blockquote>', 'Dobbo,分布式', '2018-09-20 10:29:34', '2018-09-20 10:29:34', '0', 'Alibaba', '2018-09-20 10:29:34', '0', '0', '1');

-- ----------------------------
-- Table structure for topic_summary
-- ----------------------------
DROP TABLE IF EXISTS `topic_summary`;
CREATE TABLE `topic_summary` (
  `ID` bigint(20) NOT NULL,
  `AUTHOR` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `TITLE` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `CONTENT` text CHARACTER SET utf8,
  `CREATED` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of topic_summary
-- ----------------------------
INSERT INTO `topic_summary` VALUES ('3', 'Tom', '机器学习根据文字生成图片教程（附python代码）', '这是《机器学习根据文字生成图片教程（附python代码）》这篇文章的概述', '2018-09-20 09:44:20');
INSERT INTO `topic_summary` VALUES ('4', 'Tom', '10种机器学习算法（附Python代码）', '这是《10种机器学习算法（附Python代码）》的概述', '2018-09-20 09:46:13');
INSERT INTO `topic_summary` VALUES ('5', 'Tom', '关于红黑树原理及算法详解', '这是《关于红黑树原理及算法详解》概述', '2018-09-20 09:46:41');
INSERT INTO `topic_summary` VALUES ('6', 'Tom', '背包LeetCode刷题指南（一）', '这是《背包LeetCode刷题指南（一）》的概述', '2018-09-20 09:47:11');
INSERT INTO `topic_summary` VALUES ('7', 'Tom', '背包问题的两种解决方法', '这是《背包问题的两种解决方法》的概述', '2018-09-20 09:47:41');
INSERT INTO `topic_summary` VALUES ('8', '作者', 'beego 注解路由', '这是《beego 注解路由》的概述', '2018-09-20 09:48:13');
INSERT INTO `topic_summary` VALUES ('10', 'Alibaba', 'Dobbo的背景介绍', '这是一篇介绍Dobbo背景的文章', '2018-09-20 10:12:37');
INSERT INTO `topic_summary` VALUES ('11', 'Alibaba', 'Dobbo的架构', '这是一篇介绍Dobbo架构的文章', '2018-09-20 10:18:59');
INSERT INTO `topic_summary` VALUES ('12', 'Alibaba', 'Dobbo的简单使用', '', '2018-09-20 10:20:34');
INSERT INTO `topic_summary` VALUES ('15', 'Alibaba', 'Dobbo快速启动', 'Dobbo快速启动概述', '2018-09-20 10:29:34');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `ID` bigint(20) DEFAULT NULL,
  `USERNAME` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `NICKNAME` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `PASSWORD` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `SALT` varchar(255) CHARACTER SET utf8 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'admin', null, 'e10adc3949ba59abbe56e057f20f883e', 'asgfhrf');
SET FOREIGN_KEY_CHECKS=1;
